/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepositoryObservation struct {
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PermissionAdmin *bool `json:"permissionAdmin,omitempty" tf:"permission_admin,omitempty"`

	PermissionPull *bool `json:"permissionPull,omitempty" tf:"permission_pull,omitempty"`

	PermissionPush *bool `json:"permissionPush,omitempty" tf:"permission_push,omitempty"`

	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`
}

type RepositoryParameters struct {

	// +kubebuilder:validation:Optional
	AllowManualMerge *bool `json:"allowManualMerge,omitempty" tf:"allow_manual_merge,omitempty"`

	// +kubebuilder:validation:Optional
	AllowMergeCommits *bool `json:"allowMergeCommits,omitempty" tf:"allow_merge_commits,omitempty"`

	// +kubebuilder:validation:Optional
	AllowRebase *bool `json:"allowRebase,omitempty" tf:"allow_rebase,omitempty"`

	// +kubebuilder:validation:Optional
	AllowRebaseExplicit *bool `json:"allowRebaseExplicit,omitempty" tf:"allow_rebase_explicit,omitempty"`

	// +kubebuilder:validation:Optional
	AllowSquashMerge *bool `json:"allowSquashMerge,omitempty" tf:"allow_squash_merge,omitempty"`

	// +kubebuilder:validation:Optional
	Archived *bool `json:"archived,omitempty" tf:"archived,omitempty"`

	// Flag if the repository should be initiated with the configured values
	// +kubebuilder:validation:Optional
	AutoInit *bool `json:"autoInit,omitempty" tf:"auto_init,omitempty"`

	// +kubebuilder:validation:Optional
	AutodetectManualMerge *bool `json:"autodetectManualMerge,omitempty" tf:"autodetect_manual_merge,omitempty"`

	// The default branch of the repository. Defaults to `main`
	// +kubebuilder:validation:Optional
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch,omitempty"`

	// The description of the repository.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true`
	// Need to exist in the gitea instance
	// +kubebuilder:validation:Optional
	Gitignores *string `json:"gitignores,omitempty" tf:"gitignores,omitempty"`

	// A flag if the repository should have issue management enabled or not.
	// +kubebuilder:validation:Optional
	HasIssues *bool `json:"hasIssues,omitempty" tf:"has_issues,omitempty"`

	// A flag if the repository should have the native project management enabled or not.
	// +kubebuilder:validation:Optional
	HasProjects *bool `json:"hasProjects,omitempty" tf:"has_projects,omitempty"`

	// A flag if the repository should acceppt pull requests or not.
	// +kubebuilder:validation:Optional
	HasPullRequests *bool `json:"hasPullRequests,omitempty" tf:"has_pull_requests,omitempty"`

	// A flag if the repository should have the native wiki enabled or not.
	// +kubebuilder:validation:Optional
	HasWiki *bool `json:"hasWiki,omitempty" tf:"has_wiki,omitempty"`

	// +kubebuilder:validation:Optional
	IgnoreWhitespaceConflicts *bool `json:"ignoreWhitespaceConflicts,omitempty" tf:"ignore_whitespace_conflicts,omitempty"`

	// The Issue Label configuration to be used in this repository.
	// Need to exist in the gitea instance
	// +kubebuilder:validation:Optional
	IssueLabels *string `json:"issueLabels,omitempty" tf:"issue_labels,omitempty"`

	// The license under which the source code of this repository should be.
	// Need to exist in the gitea instance
	// +kubebuilder:validation:Optional
	License *string `json:"license,omitempty" tf:"license,omitempty"`

	// +kubebuilder:validation:Optional
	MigrationCloneAddress *string `json:"migrationCloneAddress,omitempty" tf:"migration_clone_address,omitempty"`

	// DEPRECATED in favor of `migration_clone_address`
	// +kubebuilder:validation:Optional
	MigrationCloneAddresse *string `json:"migrationCloneAddresse,omitempty" tf:"migration_clone_addresse,omitempty"`

	// +kubebuilder:validation:Optional
	MigrationIssueLabels *bool `json:"migrationIssueLabels,omitempty" tf:"migration_issue_labels,omitempty"`

	// +kubebuilder:validation:Optional
	MigrationLfs *bool `json:"migrationLfs,omitempty" tf:"migration_lfs,omitempty"`

	// +kubebuilder:validation:Optional
	MigrationLfsEndpoint *string `json:"migrationLfsEndpoint,omitempty" tf:"migration_lfs_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	MigrationMilestones *bool `json:"migrationMilestones,omitempty" tf:"migration_milestones,omitempty"`

	// valid time units are 'h', 'm', 's'. 0 to disable automatic sync
	// +kubebuilder:validation:Optional
	MigrationMirrorInterval *string `json:"migrationMirrorInterval,omitempty" tf:"migration_mirror_interval,omitempty"`

	// +kubebuilder:validation:Optional
	MigrationReleases *bool `json:"migrationReleases,omitempty" tf:"migration_releases,omitempty"`

	// git/github/gitlab/gitea/gogs
	// +kubebuilder:validation:Optional
	MigrationService *string `json:"migrationService,omitempty" tf:"migration_service,omitempty"`

	// +kubebuilder:validation:Optional
	MigrationServiceAuthPasswordSecretRef *v1.SecretKeySelector `json:"migrationServiceAuthPasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	MigrationServiceAuthTokenSecretRef *v1.SecretKeySelector `json:"migrationServiceAuthTokenSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	MigrationServiceAuthUsername *string `json:"migrationServiceAuthUsername,omitempty" tf:"migration_service_auth_username,omitempty"`

	// +kubebuilder:validation:Optional
	Mirror *bool `json:"mirror,omitempty" tf:"mirror,omitempty"`

	// The Name of the repository
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Flag if the repository should be private or not.
	// +kubebuilder:validation:Optional
	Private *bool `json:"private,omitempty" tf:"private,omitempty"`

	// +kubebuilder:validation:Optional
	Readme *string `json:"readme,omitempty" tf:"readme,omitempty"`

	// +kubebuilder:validation:Optional
	RepoTemplate *bool `json:"repoTemplate,omitempty" tf:"repo_template,omitempty"`

	// The Owner of the repository
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`

	// A link to a website with more information.
	// +kubebuilder:validation:Optional
	Website *string `json:"website,omitempty" tf:"website,omitempty"`
}

// RepositorySpec defines the desired state of Repository
type RepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryParameters `json:"forProvider"`
}

// RepositoryStatus defines the observed state of Repository.
type RepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Repository is the Schema for the Repositorys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,giteajet}
type Repository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RepositorySpec   `json:"spec"`
	Status            RepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryList contains a list of Repositorys
type RepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Repository `json:"items"`
}

// Repository type metadata.
var (
	Repository_Kind             = "Repository"
	Repository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Repository_Kind}.String()
	Repository_KindAPIVersion   = Repository_Kind + "." + CRDGroupVersion.String()
	Repository_GroupVersionKind = CRDGroupVersion.WithKind(Repository_Kind)
)

func init() {
	SchemeBuilder.Register(&Repository{}, &RepositoryList{})
}
