/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type UserParameters struct {

	// Flag if this user should be active or not
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// Flag if this user should be an administrator or not
	// +kubebuilder:validation:Optional
	Admin *bool `json:"admin,omitempty" tf:"admin,omitempty"`

	// +kubebuilder:validation:Optional
	AllowCreateOrganization *bool `json:"allowCreateOrganization,omitempty" tf:"allow_create_organization,omitempty"`

	// +kubebuilder:validation:Optional
	AllowGitHook *bool `json:"allowGitHook,omitempty" tf:"allow_git_hook,omitempty"`

	// +kubebuilder:validation:Optional
	AllowImportLocal *bool `json:"allowImportLocal,omitempty" tf:"allow_import_local,omitempty"`

	// A description of the user
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// E-Mail Address of the user
	// +kubebuilder:validation:Required
	Email *string `json:"email" tf:"email,omitempty"`

	// Flag if the user defined password should be overwritten or not
	// +kubebuilder:validation:Optional
	ForcePasswordChange *bool `json:"forcePasswordChange,omitempty" tf:"force_password_change,omitempty"`

	// Full name of the user
	// +kubebuilder:validation:Optional
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The login name can differ from the username
	// +kubebuilder:validation:Required
	LoginName *string `json:"loginName" tf:"login_name,omitempty"`

	// +kubebuilder:validation:Optional
	MaxRepoCreation *float64 `json:"maxRepoCreation,omitempty" tf:"max_repo_creation,omitempty"`

	// Flag if the user should change the password after first login
	// +kubebuilder:validation:Optional
	MustChangePassword *bool `json:"mustChangePassword,omitempty" tf:"must_change_password,omitempty"`

	// Password to be set for the user
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Flag if the user should not be allowed to log in (bot user)
	// +kubebuilder:validation:Optional
	ProhibitLogin *bool `json:"prohibitLogin,omitempty" tf:"prohibit_login,omitempty"`

	// +kubebuilder:validation:Optional
	Restricted *bool `json:"restricted,omitempty" tf:"restricted,omitempty"`

	// Flag to send a notification about the user creation to the defined `email`
	// +kubebuilder:validation:Optional
	SendNotification *bool `json:"sendNotification,omitempty" tf:"send_notification,omitempty"`

	// Username of the user to be created
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`

	// Visibility of the user. Can be `public`, `limited` or `private`
	// +kubebuilder:validation:Optional
	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// User is the Schema for the Users API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,giteajet}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserSpec   `json:"spec"`
	Status            UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
