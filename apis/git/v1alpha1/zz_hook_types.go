/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HookObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HookParameters struct {

	// Content of the git hook
	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// Name of the git hook to configure
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The repository that this hook belongs too.
	// +kubebuilder:validation:Required
	Repo *string `json:"repo" tf:"repo,omitempty"`

	// The user (or organisation) owning the repo this hook belongs too
	// +kubebuilder:validation:Required
	User *string `json:"user" tf:"user,omitempty"`
}

// HookSpec defines the desired state of Hook
type HookSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HookParameters `json:"forProvider"`
}

// HookStatus defines the observed state of Hook.
type HookStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HookObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Hook is the Schema for the Hooks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,giteajet}
type Hook struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HookSpec   `json:"spec"`
	Status            HookStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HookList contains a list of Hooks
type HookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Hook `json:"items"`
}

// Repository type metadata.
var (
	Hook_Kind             = "Hook"
	Hook_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Hook_Kind}.String()
	Hook_KindAPIVersion   = Hook_Kind + "." + CRDGroupVersion.String()
	Hook_GroupVersionKind = CRDGroupVersion.WithKind(Hook_Kind)
)

func init() {
	SchemeBuilder.Register(&Hook{}, &HookList{})
}
